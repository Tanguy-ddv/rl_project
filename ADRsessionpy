"""
The ADR session contains all the functions needed to compute an ADR training on the hopper.
"""

from adr.particle import Particle
from adr import hopper_for_adr # To have the adr registered.
from env import custom_hopper # To have the target registered
from adr.discriminator import Discriminator
import gym
from agent.actor_critic_agent import ActorCriticAgent, Actor, Critic

class ADRSession:

    def __init__(self, nenvs, hidden=64, lr=1e-3) -> None:

        self.ref_env: custom_hopper.CustomHopper = gym.make("CustomHopper-target-v0")

        self.state_space = self.ref_env.observation_space.shape[-1]
        self.action_space = self.ref_env.action_space.shape[-1]
        self.mean_values = self.ref_env.get_parameters()[1:]
        self.nparams = self.mean_values.shape[0]

        # Load the particles
        self.discriminator = Discriminator(self.state_space, self.action_space, hidden, lr)

        # Load the actor-critic agent
        actor = Actor(self.state_space, self.action_space, hidden)
        critic = Critic(self.state_space, hidden)
        self.agent = ActorCriticAgent(actor, critic, lr_actor=lr, lr_critic=lr)

        # Load the particles
        self.nenvs = nenvs
        self.particles: list[Particle] = []
        self.envs: list[hopper_for_adr.HopperForADR] = []
        for _ in range(nenvs):
            self.particles.append(Particle(self.nparams, self.mean_values, hidden, lr))
            self.envs.append(gym.make("ADRHopper-v0"))
        
if __name__ == '__main__':
    s = ADRSession(2)